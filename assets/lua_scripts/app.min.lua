require("graphics.min")local a=require('data.min')local b=require('rich_text.min')local c=require('camera.min')local d=require('code.min')SCRIPT_VERSION="v1.0.7"local e=Graphics.new()EXPOSURE_NUMBER=10;local f=0;local g=0;local h=false;local i=false;local j=false;local k=0;MESSAGE_GEN_FLAG="\x10"WILDCARD_GEN_FLAG="\x12"AUDIO_DATA_FLAG="\x13"TRANSFER_DONE_FLAG="\x15"CAPTURE_SETTINGS_MSG=0x0d;MESSAGE_RESPONSE_FLAG=0x20;HOLD_RESPONSE_FLAG=0x23;DATA_MSG=0x22;TAP_SUBS_FLAG=0x10;CHECK_FW_VERSION_FLAG=0x16;CHECK_SCRIPT_VERSION_FLAG=0x17;LISTENING_FLAG=0x11;STOP_LISTENING_FLAG=0x12;AUDIO_DATA_NON_FINAL_MSG=0x05;AUDIO_DATA_FINAL_MSG=0x06;STOP_TAP_FLAG=0x13;local function l(a)local m=frame.time.utc()+2;while frame.time.utc()<m do if pcall(frame.bluetooth.send,a)then return end end end;local function n()pcall(frame.bluetooth.send,string.char(TAP_SUBS_FLAG))end;a.parsers[MESSAGE_RESPONSE_FLAG]=b.parse_rich_text;a.parsers[DATA_MSG]=d.parse_code;a.parsers[LISTENING_FLAG]=c.parse_capture_settings;local function o()if a.app_data[DATA_MSG]~=nil then local p=a.app_data[DATA_MSG].value;if p==TAP_SUBS_FLAG then frame.imu.tap_callback(n)elseif p==STOP_TAP_FLAG then frame.imu.tap_callback(nil)elseif p==STOP_LISTENING_FLAG then frame.microphone.stop()elseif p==CHECK_FW_VERSION_FLAG then l(string.char(CHECK_FW_VERSION_FLAG)..frame.FIRMWARE_VERSION)elseif p==CHECK_SCRIPT_VERSION_FLAG then l(string.char(CHECK_SCRIPT_VERSION_FLAG)..SCRIPT_VERSION)elseif p==HOLD_RESPONSE_FLAG then print("HOLD FOR RESPONSE")end;a.app_data[DATA_MSG]=nil end;if a.app_data[LISTENING_FLAG]~=nil then print("LISTENING")h=true;frame.microphone.start{}for q=1,EXPOSURE_NUMBER do c.run_auto_exposure()end;c.capture_and_send(a.app_data[LISTENING_FLAG])a.app_data[LISTENING_FLAG]=nil end;if a.app_data[MESSAGE_RESPONSE_FLAG]~=nil and a.app_data[MESSAGE_RESPONSE_FLAG].string~=nil then e:clear()e:append_text(a.app_data[MESSAGE_RESPONSE_FLAG].string,a.app_data[MESSAGE_RESPONSE_FLAG].emoji)a.app_data[MESSAGE_RESPONSE_FLAG]=nil end end;local function r()local s=frame.bluetooth.max_length()local t=math.floor((s-1)/2)*2;local u=nil;for q=1,20 do u=frame.microphone.read(t)if u==nil then print("STOPPED LISTENING")pcall(l,string.char(AUDIO_DATA_FINAL_MSG))h=false;break elseif u~=''then pcall(l,string.char(AUDIO_DATA_NON_FINAL_MSG)..u)else break end end end;e:append_text("","\u{F000D}")collectgarbage("collect")while true do local v=a.process_raw_items()if v>0 then i=false;j=false;rc,err=pcall(o)if not rc then print(err)end;g=frame.time.utc()end;if frame.bluetooth.is_connected()==false and not j then j=true;e:clear()e:append_text("","\u{F000D}")end;if frame.time.utc()-g>15 and not i and not h then i=true;e:clear()e:append_text("","\u{F0008}")end;if frame.time.utc()-f>0.07 then e:print()f=frame.time.utc()end;if frame.time.utc()-g>18 and i then frame.microphone.stop()frame.display.text(' ',1,1)frame.display.show()frame.sleep(0.05)frame.sleep()end;if h then r()end;frame.sleep(0.001)collectgarbage("collect")end